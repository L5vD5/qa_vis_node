<!DOCTYPE html>
<html>
  <head>
    <style>
      body {
        font-family: Georgia, "Times New Roman",  sans-serif;
        fill: #333333;
        font-size: 16px;
        text-align: center;
      }
      .d3-tip {
    	  line-height: 1;
    	  font-weight: bold;
    	  padding: 12px;
    	  background: rgba(0, 0, 0, 0.8);
    	  color: #fff;
    	  border-radius: 2px;
    	}

    	/* Creates a small triangle extender for the tooltip */
    	.d3-tip:after {
    	  box-sizing: border-box;
    	  display: inline;
    	  font-size: 10px;
    	  width: 100%;
    	  line-height: 1;
    	  color: rgba(0, 0, 0, 0.8);
    	  content: "\25BC";
    	  position: absolute;
    	  text-align: center;
    	}

    	/* Style northward tooltips differently */
    	.d3-tip.n:after {
    	  margin: -1px 0 0 0;
    	  top: 100%;
    	  left: 0;
    	}
    </style>
    <script type="text/javascript" src="https://d3js.org/d3.v3.min.js"></script>
    <script
      src="https://code.jquery.com/jquery-3.3.1.min.js"
      integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
      crossorigin="anonymous"></script>
    <script>
    // set the dimensions and margins of the graph
      window.onload = function() {
        var margin = {
        	top: 70,
        	right: 20,
        	bottom: 120,
        	left: 20
        };
        //윈도우 크기에 맞춤
        var width = window.innerWidth - margin.left - margin.right - 20;
        var height = window.innerHeight - margin.top - margin.bottom - 20;

        var nth = <%=nth%>

        d3.json("../attention.json", function (data) {
          var context = data['context']
          var contextLen = data['contextLen']
          var contextLenSum = contextLen.slice(0, nth-1);
          var len = contextLen[nth-1];
          var sum = contextLenSum.reduce(add, 0);
          var currentContext = context.slice(sum, sum+len);

          c2q_attn = data.c2q_attn[nth-1];//Current c2q_attn
          q2c_attn = data.q2c_attn[nth-1];//Current c2q_attn
          var qLen = c2q_attn[0].length;
          currentQuestion = data.questionSet[nth-1];//Current question
          var max = 0;
          var min = 1;

          $.each(c2q_attn, function(idx, val) {
            $.each(val, function(idx2, val2) {
              if (max < val2)
                max = val2;
              if (min > val2)
                min = val2;
            });
          });

          //Set up svg
          var svg = d3.select('#graph')
            .append('svg')
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + (margin.left + width/2) + "," + (margin.top + height/2) + ")");


      		//////////////////////////////////////////////////////////////
      		///////////////////// Data &  Scales /////////////////////////
      		//////////////////////////////////////////////////////////////

      		//Create a color scale
      		var colorScale = d3.scale.linear()
      		   .domain([1,3.5,6])
      		   .range(["#2c7bb6", "#ffffbf", "#d7191c"])
      		   .interpolate(d3.interpolateHcl);

      		//Create an arc function
      		var arc = d3.svg.arc()
      			.innerRadius(width/5)
      			.outerRadius(width/5 + 30);

      		//Turn the pie chart 90 degrees counter clockwise, so it starts at the left
      		var pie = d3.layout.pie()
      			.startAngle(-90 * Math.PI/180-Math.PI/qLen)
      			.endAngle(-90 * Math.PI/180 + 2*Math.PI-Math.PI/qLen)
      			.value(function(d) { return 1/currentQuestion.length; })
      			.padAngle(.01)
      			.sort(null);

          var tip = d3.tip()
      	    .attr("class", "d3-tip")
      	    .offset([-10, 0])
      	    .html(function(d) {
                    return currentContext[d.idx];
                });
          svg.call(tip);
      		//////////////////////////////////////////////////////////////
      		//////////////////// Create Donut Chart //////////////////////
      		//////////////////////////////////////////////////////////////

      		//Create the donut slices and also the invisible arcs for the text
      		svg.selectAll(".donutArcs")
      			.data(pie(currentQuestion))
      		  .enter().append("path")
      			.attr("class", "donutArcs")
      			.attr("d", arc)
      			.style("fill", function(d,i) {
      				if(i === 7) return "#CCCCCC"; //Other
      				else return colorScale(i);
      			})
      		.each(function(d,i) {
      			//Search pattern for everything between the start and the first capital L
      			var firstArcSection = /(^.+?)L/;

      			//Grab everything up to the first Line statement
      			var newArc = firstArcSection.exec( d3.select(this).attr("d") )[1];
      			//Replace all the comma's so that IE can handle it
      			newArc = newArc.replace(/,/g , " ");

      			//If the end angle lies beyond a quarter of a circle (90 degrees or pi/2)
      			//flip the end and start position
      			if (d.endAngle > 110 * Math.PI/180) {
      				var startLoc 	= /M(.*?)A/,		//Everything between the first capital M and first capital A
      					middleLoc 	= /A(.*?)0 0 1/,	//Everything between the first capital A and 0 0 1
      					endLoc 		= /0 0 1 (.*?)$/;	//Everything between the first 0 0 1 and the end of the string (denoted by $)
      				//Flip the direction of the arc by switching the start en end point (and sweep flag)
      				//of those elements that are below the horizontal line
      				var newStart = endLoc.exec( newArc )[1];
      				var newEnd = startLoc.exec( newArc )[1];
      				var middleSec = middleLoc.exec( newArc )[1];

      				//Build up the new arc notation, set the sweep-flag to 0
      				newArc = "M" + newStart + "A" + middleSec + "0 0 0 " + newEnd;
      			}//if

      			//Create a new invisible arc that the text can flow along
      			svg.append("path")
      				.attr("class", "hiddenDonutArcs")
      				.attr("id", "donutArc"+i)
      				.attr("d", newArc)
      				.style("fill", "none");
      		});

      		//Append the label names on the outside
      		svg.selectAll(".donutText")
      			.data(pie(currentQuestion))
      		   .enter().append("text")
      			.attr("class", "donutText")
      			//Move the labels below the arcs for those slices with an end angle greater than 90 degrees
      			.attr("dy", function(d,i) { return (d.endAngle > 110 * Math.PI/180 ? 18 : -11); })
      		   .append("textPath")
      			.attr("startOffset","50%")
      			.style("text-anchor","middle")
      			.attr("xlink:href",function(d,i){return "#donutArc"+i;})
      			.text(function(d){return d.data;});

            var dArray = [];
            $.each(c2q_attn, function(idx, val) {
              var x=0, y=0;
              $.each(val, function(idx2, val2) {
                x+=-val2*Math.cos(2*Math.PI*idx2/qLen);
                y+=-val2*Math.sin(2*Math.PI*idx2/qLen);
              });
              d={idx, x, y};
              dArray.push(d);
            });
            console.warn(dArray);

            svg.selectAll(".dot")
              .data(dArray)
              .enter(c2q_attn).append("circle")
                .attr("class", "dot")
                .attr("r", 3.5)
                .attr("transform", function (d) {return "translate("+400*d.x+", "+400*d.y+")"})
                .on("mouseover", tip.show)
                .on("mouseout", tip.hide);


          function add(a, b) {
            return a + b;
          }
        });

      }


    </script>
    <script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>
  </head>
  <body>
    <div id="graph"></div>
  </body>
</html>
