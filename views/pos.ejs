<!DOCTYPE html>
<html>
  <head>
    <style>
    .grid line {
      stroke: lightgrey;
      stroke-opacity: 0.7;
    }
    .lineChart { fill: none; stroke: steelblue; stroke-width: 1.5px; }
    .lineChart:hover { stroke: black; stroke-width: 3px; }

    </style>
    <script type="text/javascript" src="https://d3js.org/d3.v4.min.js"></script>
    <script
      src="https://code.jquery.com/jquery-3.3.1.min.js"
      integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
      crossorigin="anonymous"></script>
    <script>
    // set the dimensions and margins of the graph
      window.onload = function() {
        var margin = { top: 20, right: 20, bottom: 50, left: 50 },
          outerWidth = 1500,
          outerHeight = 800,
          width = outerWidth - margin.left - margin.right,
          height = outerHeight - margin.top - margin.bottom;
          
          var nth = <%=nth%>

          d3.json("../pos.json", function (data) {
            var context = data['context']
            var contextLen = data['contextLen']
            var contextLenSum = contextLen.slice(0, nth-1);
            var len = contextLen[nth-1];
            var sum = contextLenSum.reduce(add, 0);

            var p1 = data['p1Set']
            var p2 = data['p2Set']

            var currentContext = context.slice(sum, sum+len);
            var currentp1 = p1.slice(sum, sum+len);
            var currentp2 = p2.slice(sum, sum+len);
            var series = ['p1', 'p2']

            var keys = d3.keys(currentp1);
            var xy = [];
            xy[0] = keys.map(function(key) { return {x: key, y: currentp1[key]}; });
            xy[1] = keys.map(function(key) { return {x: key, y: currentp2[key]}; });
            
            var svg = d3.select("#graph").append('svg')
            .attr("width", 1600).attr("height", 1000)
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

            var xScale = d3.scalePoint()//scaleBand() scaleOrdinal
                .domain(keys)
                .rangeRound([0, width]);
            var yScale = d3.scaleLinear()
              .domain([0, 0.08])
              .nice()
              .range([height, 0]);
            var colors = d3.scaleOrdinal(d3.schemeCategory10);

            svg.append("g")
              .attr("class", "grid")
              .attr("transform", "translate(0," + height + ")")
              .call(d3.axisBottom(xScale)
                  .tickSize(-height)
              );
            svg.append("g")
              .attr("class", "grid")
              .call(d3.axisLeft(yScale)
                .ticks(5)
                .tickSize(-width)
              );
            var line = d3.line()
              //.curve(d3.curveBasis)
              .x(function(d) { return xScale(d.x); })
              .y(function(d) { return yScale(d.y); });


            var lineG = svg.append("g")
              .selectAll("g")
              .data(xy)
            .enter().append("g");
            lineG.append("path")
              .attr("class", "lineChart")
              .style("stroke", function(d, i) { return colors( series[i]); })
              .attr("d", function(d, i) {return line(d); });

            
            function add(a, b) {
              return a + b;
            }
          });

        };

      


    </script>
  </head>
  <body>
    <div id="graph"></div>
  </body>
</html>
